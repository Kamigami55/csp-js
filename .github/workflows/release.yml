name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is-prerelease: ${{ steps.extract.outputs.is-prerelease }}
    
    steps:
      - name: Extract version from tag
        id: extract
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Releasing version: $VERSION"
          echo "Is prerelease: ${{ steps.extract.outputs.is-prerelease }}"

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Type check
        run: pnpm check-types

      - name: Lint
        run: pnpm lint

      - name: Security audit
        run: pnpm audit --audit-level moderate

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    permissions:
      contents: write
      id-token: write  # for npm provenance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Verify package contents
        run: |
          echo "## Package Contents" >> $GITHUB_STEP_SUMMARY
          for pkg in packages/*/package.json; do
            dir=$(dirname "$pkg")
            name=$(jq -r '.name' "$pkg")
            echo "### $name" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            find "$dir/dist" -type f 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || echo "No dist files found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          done

      - name: Run package tests
        run: |
          # Test that packages can be required/imported
          cd packages/csp-js
          node -e "
            const pkg = require('./dist/index.js');
            console.log('‚úÖ csp-js can be required');
            console.log('Available exports:', Object.keys(pkg));
            
            const result = pkg.generateCSP(['google-analytics']);
            if (!result.header) throw new Error('generateCSP failed');
            console.log('‚úÖ generateCSP works');
          "
          
          cd ../csp-data
          node -e "
            const pkg = require('./dist/index.js');
            console.log('‚úÖ csp-data can be required');
            console.log('Services count:', Object.keys(pkg.services).length);
            
            if (Object.keys(pkg.services).length === 0) {
              throw new Error('No services found');
            }
            console.log('‚úÖ Services loaded');
          "

      - name: Generate changelog excerpt
        run: |
          # Extract changelog for this version
          VERSION=${{ needs.validate-tag.outputs.version }}
          
          # Create a changelog excerpt for this release
          if [ -f CHANGELOG.md ]; then
            awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > /tmp/changelog-excerpt.md
          else
            echo "Release $VERSION" > /tmp/changelog-excerpt.md
            echo "" >> /tmp/changelog-excerpt.md
            echo "Automated release from tag v$VERSION" >> /tmp/changelog-excerpt.md
          fi
          
          echo "Changelog excerpt:"
          cat /tmp/changelog-excerpt.md

      - name: Publish to NPM
        run: |
          # Configure npm authentication
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
          
          VERSION=${{ needs.validate-tag.outputs.version }}
          IS_PRERELEASE=${{ needs.validate-tag.outputs.is-prerelease }}
          
          # Determine npm tag
          if [ "$IS_PRERELEASE" = "true" ]; then
            NPM_TAG="beta"
          else
            NPM_TAG="latest"
          fi
          
          echo "Publishing with tag: $NPM_TAG"
          
          # Publish packages
          cd packages/csp-data
          npm publish --tag $NPM_TAG --provenance --access public
          
          cd ../csp-js
          npm publish --tag $NPM_TAG --provenance --access public
          
          cd ../csp-cli
          npm publish --tag $NPM_TAG --provenance --access public
          
          echo "‚úÖ All packages published successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: /tmp/changelog-excerpt.md
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
          generate_release_notes: true
          files: |
            packages/*/dist/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Pages
        if: needs.validate-tag.outputs.is-prerelease == 'false'
        run: |
          # Trigger documentation update
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type":"docs-update","client_payload":{"version":"${{ needs.validate-tag.outputs.version }}"}}'

  verify-release:
    name: Verify Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-publish]
    
    steps:
      - name: Wait for NPM propagation
        run: sleep 60

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Verify NPM packages
        run: |
          VERSION=${{ needs.validate-tag.outputs.version }}
          
          # Test installation from NPM
          npm install csp-js@$VERSION
          npm install @csp-js/data@$VERSION
          npm install @csp-js/cli@$VERSION
          
          echo "‚úÖ Packages installed successfully"
          
          # Test basic functionality
          node -e "
            const { generateCSP } = require('csp-js');
            const result = generateCSP(['google-analytics']);
            if (!result.header.includes('google-analytics')) {
              throw new Error('CSP generation failed');
            }
            console.log('‚úÖ Package functionality verified');
          "

      - name: Test CLI installation
        run: |
          # Test global CLI installation
          npm install -g @csp-js/cli@${{ needs.validate-tag.outputs.version }}
          
          # Test CLI functionality
          csp-cli --version
          
          echo "‚úÖ CLI installed and working"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-tag, verify-release]
    if: always() && needs.build-and-publish.result == 'success'
    
    steps:
      - name: Notify Discord (if configured)
        if: env.DISCORD_WEBHOOK_URL != ''
        run: |
          VERSION=${{ needs.validate-tag.outputs.version }}
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\"üéâ CSP-JS v$VERSION has been released! üõ°Ô∏è\\n\\nCheck it out: https://github.com/${{ github.repository }}/releases/tag/v$VERSION\"}" \
            $DISCORD_WEBHOOK_URL
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Create Twitter announcement (if configured)
        if: env.TWITTER_ENABLED == 'true'
        run: |
          echo "üõ°Ô∏è CSP-JS v${{ needs.validate-tag.outputs.version }} is live!"
          echo ""
          echo "Generate Content Security Policies from service names in seconds!"
          echo ""
          echo "npm install csp-js@${{ needs.validate-tag.outputs.version }}"
          echo ""
          echo "#WebSecurity #CSP #OpenSource #JavaScript #TypeScript"
          echo ""
          echo "https://github.com/${{ github.repository }}"
        env:
          TWITTER_ENABLED: ${{ secrets.TWITTER_ENABLED }}